# frozen_string_literal: true

require 'spec_helper'

RSpec.describe FileService do
  describe '#save' do
    let(:file) { 'tmp/library.data' }

    before(:each) do
      File.delete(file) if File.exist?(file)
    end

    it 'saves library to specified file' do
      library = double('library').tap do |lib|
        book   = build(:book)
        reader = build(:reader)

        order = build(:order, book: book, reader: reader)

        expect(lib).to receive(:to_h).and_return(
          books:   [book],
          orders:  [order],
          readers: [reader],
          authors: [book.author]
        )
      end

      FileService.new.save(library, file)

      expect(File.exist?(file)).to be_truthy
      expect(File.empty?(file)).to be_falsey
    end
  end

  describe '#load' do
    # file generated by spec for `#save` method
    let(:file) { 'spec/support/library.data' }

    describe 'file exists' do
      it 'loads library from specified file' do
        library = FileService.new.load(file)

        book   = library.books.first
        order  = library.orders.first
        reader = library.readers.first
        author = library.authors.first

        expect(author).to eq(book.author)

        expect(order.book).to eq(book)
        expect(order.reader).to eq(reader)
      end
    end

    describe 'file does not exist' do
      it 'initialize empty library' do
        library = FileService.new.load('fake.data')

        %i[books orders authors readers].each do |property|
          expect(library.public_send(property)).to be_empty
        end
      end
    end
  end
end
